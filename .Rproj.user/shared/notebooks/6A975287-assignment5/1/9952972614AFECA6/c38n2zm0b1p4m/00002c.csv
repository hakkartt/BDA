"0","Metropolis_bioassay <- function(iterations, n_of_chains, scale){"
"0","  "
"0"," "
"0","  "
"0","  # 1. Draw starting point alpha0 and beta0 for which"
"0","  #    p(alpha0, beta0|y) > 0 from starting distribution"
"0","  stored = array(dim = c(n_of_chains, iterations, 2))"
"0","  chain = array(dim = c(iterations + 1, 2))"
"0","  chain[1,] = rmvnorm(1, mu_0, sigma_0)"
"0","  "
"0","  for (i in 1:n_of_chains) {"
"0","    # 2. For t = 1, 2, ..."
"0","    for (t in 1:iterations){"
"0","      # a) Sample a proposal alpha* and beta* from a jumping distribution at time t."
"0","      #    Jumping distribution must be symmetric."
"0","      alpha_prop = rnorm(1, chain[t, 1], (scale*2)^2)"
"0","      beta_prop = rnorm(1, chain[t, 2], (scale*10)^2)"
"0","      # b) Calculate the ratio of densities"
"0","      r = density_ratio(alpha_prop, chain[t, 1], beta_prop, chain[t, 2],"
"0","                        bioassay$x, bioassay$y, bioassay$n)"
"0","      # c) Set..."
"0","      if(runif(1) < r){"
"0","        chain[t+1, ] = c(alpha_prop, beta_prop)"
"0","      } else {"
"0","        chain[t+1, ] = chain[t, ]"
"0","      }"
"0","    }"
"0","    # Discard the warmup period from each chain, which by default is the first half of the chain"
"0","    chain = chain[(iterations/2 + 1):iterations,]"
"0","    stored[i,,] = chain"
"0","    chain = array(dim = c(iterations + 1, 2))"
"0","    chain[1,] = rmvnorm(1, mu_0, sigma_0)"
"0","  }"
"0","  stored"
"0","}"
"0","# Try with N = 1 chains first"
"0","result = Metropolis_bioassay(1000, 3, 0.5)"
